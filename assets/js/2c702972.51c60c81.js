"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[492],{76879:function(e){e.exports=JSON.parse('{"functions":[{"name":"is","desc":"Returns whether the passed object is a BitBuffer.\\n\\n```lua\\nprint(BitBuffer.is(BitBuffer.new())) --\x3e true\\nprint(BitBuffer.is(true)) --\x3e false\\n```","params":[{"name":"obj","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","tags":["General"],"source":{"line":194,"path":"src/init.lua"}},{"name":"new","desc":"Creates a new BitBuffer with an initial size of `sizeInBits`.\\n\\n```lua\\nlocal buffer = BitBuffer.new(128)\\nprint(buffer:GetSize()) --\x3e 128\\n```","params":[{"name":"sizeInBits","desc":"Initial size of the buffer in bits (defaults to 0)","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"BitBuffer"}],"function_type":"static","tags":["Constructor"],"source":{"line":210,"path":"src/init.lua"}},{"name":"FromString","desc":"Creates a new BitBuffer from a binary string, starting with a size corresponding to number of bits in the input string (8 bits per character), and it\'s cursor positioned at 0.\\n\\n```lua\\nlocal buffer = BitBuffer.FromString(\\"\\\\89\\")\\nprint(buffer:ReadUInt(8)) --\x3e 89\\nprint(buffer:GetSize()) --\x3e 8\\n```\\n\\nSee [BitBuffer::ToString](#ToString)","params":[{"name":"inputStr","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"BitBuffer"}],"function_type":"static","tags":["Constructor"],"source":{"line":234,"path":"src/init.lua"}},{"name":"FromBase64","desc":"Creates a new BitBuffer from a Base64 string, starting with a size corresponding to the number of bits stored in the input string (6 bits per character), and it\'s cursor positioned at 0.\\n\\n```lua\\nlocal str = base64(\\"\\\\45\\\\180\\")\\nlocal buffer = BitBuffer.FromBase64(str)\\n\\nprint(buffer:ReadUInt(8)) --\x3e 45\\nprint(buffer:ReadUInt(8)) --\x3e 180\\n```\\n\\nSee [BitBuffer::ToBase64](#ToBase64)","params":[{"name":"inputStr","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"BitBuffer"}],"function_type":"static","tags":["Constructor"],"source":{"line":274,"path":"src/init.lua"}},{"name":"FromBase91","desc":"Creates a new BitBuffer from a Base91 string, starting with a size corresponding to the number of bits stored in the input string, and it\'s cursor positioned at 0.\\n**This is the recommended function to use for DataStores.**\\n\\n```lua\\nlocal initialBuffer = BitBuffer.new()\\ninitialBuffer:WriteUInt(32, 78)\\ninitialBuffer:WriteString(\\"Hi\\")\\n\\nlocal b91 = initialBuffer:ToBase91()\\nlocal newBuffer = BitBuffer.FromBase91(b91)\\nprint(newBuffer:ReadUInt(32)) --\x3e 78\\nprint(newBuffer:ReadString()) --\x3e Hi\\n```\\n\\nSee [BitBuffer::ToBase91](#ToBase91)\\n\\n:::info What is Base91?\\nBase91 is a way to pack binary data into text, similar to Base64. It is, on average, about 10% more efficient than Base64. Check [this page](http://base91.sourceforge.net) to learn more.\\n:::","params":[{"name":"inputStr","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"BitBuffer"}],"function_type":"static","tags":["Constructor"],"source":{"line":367,"path":"src/init.lua"}},{"name":"FromBase128","desc":"Creates a new BitBuffer from a Base128 string, starting with a size corresponding to the number of bits stored in the input string (7 bits per character), and it\'s cursor positioned at 0.\\n\\n```lua\\nlocal str = base128(\\"\\\\255\\\\12\\")\\nlocal buffer = BitBuffer.FromBase128(str)\\nprint(buffer:ReadUInt(8)) --\x3e 255\\nprint(buffer:ReadUInt(8)) --\x3e 12\\n```\\n\\nSee [BitBuffer::ToBase128](#ToBase128)","params":[{"name":"inputStr","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"BitBuffer"}],"function_type":"static","tags":["Constructor"],"source":{"line":434,"path":"src/init.lua"}},{"name":"ResetCursor","desc":"Resets the position of the cursor.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(32, 890)\\nbuffer:ResetCursor()\\n\\nprint(buffer:GetCursor()) --\x3e 0\\n```","params":[],"returns":[],"function_type":"method","tags":["General"],"source":{"line":493,"path":"src/init.lua"}},{"name":"SetCursor","desc":"Sets the position of the cursor to the given position.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(32, 67)\\nbuffer:WriteUInt(32, 44)\\n\\nbuffer:SetCursor(32)\\nprint(buffer:ReadUInt(32)) --\x3e 44\\n```","params":[{"name":"position","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","tags":["General"],"source":{"line":512,"path":"src/init.lua"}},{"name":"GetCursor","desc":"Returns the position of the cursor.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(17, 901)\\nbuffer:WriteUInt(4, 2)\\nprint(buffer:GetCursor()) --\x3e 21\\n```","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","tags":["General"],"source":{"line":533,"path":"src/init.lua"}},{"name":"ResetBuffer","desc":"Clears the buffer, setting its size to zero, and sets its position to 0.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(32, math.pow(2, 32) - 1)\\n\\nbuffer:ResetBuffer()\\nprint(buffer:GetCursor()) --\x3e 0\\nprint(buffer:ReadUInt(32)) --\x3e 0\\n```","params":[],"returns":[],"function_type":"method","tags":["General"],"source":{"line":550,"path":"src/init.lua"}},{"name":"GetSize","desc":"Returns the size of the buffer.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(18, 618)\\n\\nprint(buffer:GetSize()) --\x3e 18\\n```","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","tags":["General"],"source":{"line":569,"path":"src/init.lua"}},{"name":"ToString","desc":"Serializes the buffer into a binary string.\\nYou can retrieve the buffer from this string using [BitBuffer.FromString](#FromString).\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(8, 65)\\nbuffer:WriteUInt(8, 66)\\nbuffer:WriteUInt(8, 67)\\n\\nprint(buffer:ToString()) --\x3e ABC\\n```\\n\\nSee [BitBuffer.FromString](#FromString)","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","tags":["Serialization"],"source":{"line":590,"path":"src/init.lua"}},{"name":"ToBase64","desc":"Serializes the buffer into a Base64 string.\\nYou can retrieve the buffer from this string using [BitBuffer.FromBase64](#FromBase64).\\n\\n```lua\\nlocal initialBuffer = BitBuffer.new()\\ninitialBuffer:WriteUInt(15, 919)\\ninitialBuffer:WriteString(\\"Hello!\\")\\n\\nlocal b64 = initialBuffer:ToBase64()\\nlocal newBuffer = BitBuffer.FromBase64(b64)\\nprint(newBuffer:ReadUInt(15)) --\x3e 919\\nprint(newBuffer:ReadString()) --\x3e Hello!\\n```\\nSee [BitBuffer.FromBase64](#FromBase64)","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","tags":["Serialization"],"source":{"line":621,"path":"src/init.lua"}},{"name":"ToBase91","desc":"Serializes the buffer into a Base91 string.\\nYou can retrieve the buffer from this string using [BitBuffer.FromBase91](#FromBase91).\\n**This is the recommended function to use for DataStores.**\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteString(playerData.CustomName)\\nbuffer:WriteUInt(8, playerData.Level)\\nbuffer:WriteUInt(16, playerData.Money)\\n\\nSaveToDataStore(buffer:ToBase91())\\n```\\n```lua\\nlocal b91 = RetrieveFromDataStore()\\nlocal buffer = BitBuffer.FromBase91(b91)\\n\\nlocal playerData = {\\n\\tCustomName = buffer:ReadString();\\n\\tLevel = buffer:ReadUInt(8);\\n\\tMoney = buffer:ReadUInt(16);\\n}\\n```\\n\\nSee [BitBuffer.FromBase91](#FromBase91)","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","tags":["Serialization"],"source":{"line":683,"path":"src/init.lua"}},{"name":"ToBase128","desc":"Serializes the buffer into a Base128 string.\\nYou can retrieve the buffer from this string using [BitBuffer.FromBase128](#FromBase128).\\n\\nreturn string","params":[],"returns":[],"function_type":"method","tags":["Serialization"],"source":{"line":738,"path":"src/init.lua"}},{"name":"WriteUInt","desc":"Writes an unsigned integer of `bitWidth` bits to the buffer.\\n`bitWidth` must be an integer between 1 and 32.\\nIf the input integer uses more bits than `bitWidth`, it will overflow as expected.\\n\\n```lua\\nbuffer:WriteUInt(32, 560) -- Writes 560 to the buffer\\nbuffer:WriteUInt(3, 9) -- Writes 0b101 (5) because 9 is 0b1101, but `bitWidth` is only 3!\\n```","params":[{"name":"bitWidth","desc":"","lua_type":"number"},{"name":"uint","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":778,"path":"src/init.lua"}},{"name":"ReadUInt","desc":"Reads `bitWidth` bits from the buffer as an unsigned integer.\\n`bitWidth` must be an integer between 1 and 32.\\n\\n```lua\\nbuffer:WriteUInt(12, 89)\\nbuffer:ResetCursor()\\nprint(buffer:ReadUInt(12)) --\x3e 89\\n```","params":[{"name":"bitWidth","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","tags":["Read"],"source":{"line":804,"path":"src/init.lua"}},{"name":"WriteInt","desc":"Writes a signed integer of `bitWidth` bits using [two\'s complement](https://en.wikipedia.org/wiki/Two%27s_complement).\\n`bitWidth` must be an integer between 1 and 32.\\nOverflow is **untested**, use at your own risk.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteInt(22, -901) --\x3e Writes -901 to the buffer\\n```","params":[{"name":"bitWidth","desc":"","lua_type":"number"},{"name":"int","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":828,"path":"src/init.lua"}},{"name":"ReadInt","desc":"Reads `bitWidth` bits as a signed integer stored using [two\'s complement](https://en.wikipedia.org/wiki/Two%27s_complement).\\n`bitWidth` must be an integer between 1 and 32.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteInt(15, -78)\\nbuffer:ResetCursor()\\nprint(buffer:ReadInt(15)) --\x3e -78\\n```","params":[{"name":"bitWidth","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","tags":["Read"],"source":{"line":855,"path":"src/init.lua"}},{"name":"WriteBool","desc":"Writes one bit the buffer: 1 if `value` is truthy, 0 otherwise.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteBool(true) --\x3e Writes 1\\nbuffer:WriteBool(\\"A\\") --\x3e Also writes 1\\nbuffer:WriteBool(nil) --\x3e Writes 0\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":880,"path":"src/init.lua"}},{"name":"ReadBool","desc":"Reads one bit from the buffer and returns a boolean: true if the bit is 1, false if the bit is 0.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(4, 0b1011)\\nbuffer:ResetCursor()\\n\\nprint(buffer:ReadBool()) --\x3e true\\nprint(buffer:ReadBool()) --\x3e true\\nprint(buffer:ReadBool()) --\x3e false\\nprint(buffer:ReadBool()) --\x3e true\\n```","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["Read"],"source":{"line":905,"path":"src/init.lua"}},{"name":"WriteChar","desc":"Writes one ASCII character (one byte) to the buffer.\\n`char` cannot be an empty string.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteChar(\\"k\\")\\nbuffer:ResetCursor()\\nprint(buffer:ReadChar()) --\x3e k\\n```","params":[{"name":"char","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":923,"path":"src/init.lua"}},{"name":"ReadChar","desc":"Reads one byte as an ASCII character from the buffer.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(8, 65)\\nbuffer:ResetCursor()\\nprint(buffer:ReadChar()) --\x3e A\\n```","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","tags":["Read"],"source":{"line":946,"path":"src/init.lua"}},{"name":"WriteBytes","desc":"Writes a stream of bytes to the buffer.\\nif `bytes` is an empty string, nothing will be written.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteBytes(\\"AD\\")\\nbuffer:ResetCursor()\\nprint(buffer:ReadUInt(8), buffer:ReadUInt(8)) --\x3e 65 68\\n```\\n\\nSee [BitBuffer::WriteString](#WriteString)","params":[{"name":"bytes","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":965,"path":"src/init.lua"}},{"name":"ReadBytes","desc":"Reads `length` bytes as a string from the buffer.\\nif `length` is 0, nothing will be read and an empty string will be returned.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteUInt(8, 65)\\nbuffer:WriteUInt(8, 67)\\nprint(buffer:ReadBytes(2)) --\x3e AC\\n```\\n\\nSee [BitBuffer::ReadString](#ReadString)","params":[{"name":"length","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","tags":["Read"],"source":{"line":1005,"path":"src/init.lua"}},{"name":"WriteString","desc":"Writes a string to the buffer.\\n\\nWriteString will write the length of the string as a 24-bit unsigned integer first, then write the bytes in the string.\\nThe length of the string cannot be greater than `2^24 - 1 (16777215)`.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteString(\\"AB\\")\\nbuffer:ResetCursor()\\nprint(buffer:ReadUInt(24), buffer:ReadBytes(2)) --\x3e 2 AB\\n```\\n\\nSee [BitBuffer::WriteBytes](#WriteBytes)","params":[{"name":"str","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":1048,"path":"src/init.lua"}},{"name":"ReadString","desc":"Reads a string from the buffer (see [BitBuffer::WriteString](#WriteString)).\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteString(\\"Hello!\\")\\nbuffer:ResetCursor()\\nprint(buffer:ReadString()) --\x3e Hello!\\n```\\n\\nSee [BitBuffer:ReadBytes](#ReadBytes)","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","tags":["Read"],"source":{"line":1076,"path":"src/init.lua"}},{"name":"WriteFloat32","desc":"Writes a single-precision floating point number to the buffer.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteFloat32(892.738)\\nbuffer:ResetCursor()\\nprint(buffer:ReadFloat32()) --\x3e 892.73797607421875\\n```","params":[{"name":"float","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":1100,"path":"src/init.lua"}},{"name":"ReadFloat32","desc":"Reads a single-precision floating point number from the buffer.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteFloat32(892.738)\\nbuffer:ResetCursor()\\nprint(buffer:ReadFloat32()) --\x3e 892.73797607421875\\n```","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","tags":["Read"],"source":{"line":1134,"path":"src/init.lua"}},{"name":"WriteFloat64","desc":"Writes a double-precision floating point number to the buffer.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteFloat64(-76358128.888202341)\\nbuffer:ResetCursor()\\nprint(buffer:ReadFloat64()) --\x3e -76358128.888202\\n```","params":[{"name":"double","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","tags":["Write"],"source":{"line":1166,"path":"src/init.lua"}},{"name":"ReadFloat64","desc":"Reads a double-precision floating point number from the buffer.\\n\\n```lua\\nlocal buffer = BitBuffer.new()\\nbuffer:WriteFloat64(-76358128.888202341)\\nbuffer:ResetCursor()\\nprint(buffer:ReadFloat64()) --\x3e -76358128.888202\\n```","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","tags":["Read"],"source":{"line":1189,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"BitBuffer","desc":"BitBuffer object.","source":{"line":175,"path":"src/init.lua"}}')}}]);