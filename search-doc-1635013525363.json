[{"title":"BitBuffer","type":0,"sectionRef":"#","url":"api/BitBuffer","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#functions","content":" "},{"title":"FromBase128","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#FromBase128","content":"Constructor &lt;/&gt; BitBuffer.FromBase128(inputStr: string) → BitBuffer Creates a new BitBuffer from a Base128 string, starting with a size corresponding to the number of bits stored in the input string (7 bits per character), and it's cursor positioned at 0. local str = base128(&quot;\\255\\12&quot;) local buffer = BitBuffer.FromBase128(str) print(buffer:ReadUInt(8)) --&gt; 255 print(buffer:ReadUInt(8)) --&gt; 12 See BitBuffer::ToBase128  "},{"title":"FromBase64","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#FromBase64","content":"Constructor &lt;/&gt; BitBuffer.FromBase64(inputStr: string) → BitBuffer Creates a new BitBuffer from a Base64 string, starting with a size corresponding to the number of bits stored in the input string (6 bits per character), and it's cursor positioned at 0. local str = base64(&quot;\\45\\180&quot;) local buffer = BitBuffer.FromBase64(str) print(buffer:ReadUInt(8)) --&gt; 45 print(buffer:ReadUInt(8)) --&gt; 180 See BitBuffer::ToBase64  "},{"title":"FromBase91","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#FromBase91","content":"Constructor &lt;/&gt; BitBuffer.FromBase91(inputStr: string) → BitBuffer Creates a new BitBuffer from a Base91 string, starting with a size corresponding to the number of bits stored in the input string, and it's cursor positioned at 0.This is the recommended function to use for DataStores. local initialBuffer = BitBuffer.new() initialBuffer:WriteUInt(32, 78) initialBuffer:WriteString(&quot;Hi&quot;) local b91 = initialBuffer:ToBase91() local newBuffer = BitBuffer.FromBase91(b91) print(newBuffer:ReadUInt(32)) --&gt; 78 print(newBuffer:ReadString()) --&gt; Hi See BitBuffer::ToBase91 What is Base91? Base91 is a way to pack binary data into text, similar to Base64. It is, on average, about 10% more efficient than Base64. Check this page to learn more.  "},{"title":"FromString","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#FromString","content":"Constructor &lt;/&gt; BitBuffer.FromString(inputStr: string) → BitBuffer Creates a new BitBuffer from a binary string, starting with a size corresponding to number of bits in the input string (8 bits per character), and it's cursor positioned at 0. local buffer = BitBuffer.FromString(&quot;\\89&quot;) print(buffer:ReadUInt(8)) --&gt; 89 print(buffer:GetSize()) --&gt; 8 See BitBuffer::ToString  "},{"title":"is","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#is","content":"General &lt;/&gt; BitBuffer.is(obj: any) → boolean Returns whether the passed object is a BitBuffer. print(BitBuffer.is(BitBuffer.new())) --&gt; true print(BitBuffer.is(true)) --&gt; false   "},{"title":"new","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#new","content":"Constructor &lt;/&gt; BitBuffer.new( sizeInBits: number?-- Initial size of the buffer in bits (defaults to 0) ) → BitBuffer Creates a new BitBuffer with an initial size of sizeInBits. local buffer = BitBuffer.new(128) print(buffer:GetSize()) --&gt; 128   "},{"title":"GetCursor","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#GetCursor","content":"General &lt;/&gt; BitBuffer:GetCursor() → number Returns the position of the cursor. local buffer = BitBuffer.new() buffer:WriteUInt(17, 901) buffer:WriteUInt(4, 2) print(buffer:GetCursor()) --&gt; 21   "},{"title":"GetSize","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#GetSize","content":"General &lt;/&gt; BitBuffer:GetSize() → number Returns the size of the buffer. local buffer = BitBuffer.new() buffer:WriteUInt(18, 618) print(buffer:GetSize()) --&gt; 18   "},{"title":"ReadBool","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadBool","content":"Read &lt;/&gt; BitBuffer:ReadBool() → boolean Reads one bit from the buffer and returns a boolean: true if the bit is 1, false if the bit is 0. local buffer = BitBuffer.new() buffer:WriteUInt(4, 0b1011) buffer:ResetCursor() print(buffer:ReadBool()) --&gt; true print(buffer:ReadBool()) --&gt; true print(buffer:ReadBool()) --&gt; false print(buffer:ReadBool()) --&gt; true   "},{"title":"ReadBytes","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadBytes","content":"Read &lt;/&gt; BitBuffer:ReadBytes(length: number) → string Reads length bytes as a string from the buffer. if length is 0, nothing will be read and an empty string will be returned. local buffer = BitBuffer.new() buffer:WriteUInt(8, 65) buffer:WriteUInt(8, 67) print(buffer:ReadBytes(2)) --&gt; AC See BitBuffer::ReadString  "},{"title":"ReadChar","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadChar","content":"Read &lt;/&gt; BitBuffer:ReadChar() → string Reads one byte as an ASCII character from the buffer. local buffer = BitBuffer.new() buffer:WriteUInt(8, 65) buffer:ResetCursor() print(buffer:ReadChar()) --&gt; A   "},{"title":"ReadFloat32","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadFloat32","content":"Read &lt;/&gt; BitBuffer:ReadFloat32() → number Reads a single-precision floating point number from the buffer. local buffer = BitBuffer.new() buffer:WriteFloat32(892.738) buffer:ResetCursor() print(buffer:ReadFloat32()) --&gt; 892.73797607421875   "},{"title":"ReadFloat64","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadFloat64","content":"Read &lt;/&gt; BitBuffer:ReadFloat64() → number Reads a double-precision floating point number from the buffer. local buffer = BitBuffer.new() buffer:WriteFloat64(-76358128.888202341) buffer:ResetCursor() print(buffer:ReadFloat64()) --&gt; -76358128.888202   "},{"title":"ReadInt","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadInt","content":"Read &lt;/&gt; BitBuffer:ReadInt(bitWidth: number) → number Reads bitWidth bits as a signed integer stored using two's complement. bitWidth must be an integer between 1 and 32. local buffer = BitBuffer.new() buffer:WriteInt(15, -78) buffer:ResetCursor() print(buffer:ReadInt(15)) --&gt; -78   "},{"title":"ReadString","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadString","content":"Read &lt;/&gt; BitBuffer:ReadString() → string Reads a string from the buffer (see BitBuffer::WriteString). local buffer = BitBuffer.new() buffer:WriteString(&quot;Hello!&quot;) buffer:ResetCursor() print(buffer:ReadString()) --&gt; Hello! See BitBuffer:ReadBytes  "},{"title":"ReadUInt","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ReadUInt","content":"Read &lt;/&gt; BitBuffer:ReadUInt(bitWidth: number) → number Reads bitWidth bits from the buffer as an unsigned integer. bitWidth must be an integer between 1 and 32. buffer:WriteUInt(12, 89) buffer:ResetCursor() print(buffer:ReadUInt(12)) --&gt; 89   "},{"title":"ResetBuffer","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ResetBuffer","content":"General &lt;/&gt; BitBuffer:ResetBuffer() → () Clears the buffer, setting its size to zero, and sets its position to 0. local buffer = BitBuffer.new() buffer:WriteUInt(32, math.pow(2, 32) - 1) buffer:ResetBuffer() print(buffer:GetCursor()) --&gt; 0 print(buffer:ReadUInt(32)) --&gt; 0   "},{"title":"ResetCursor","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ResetCursor","content":"General &lt;/&gt; BitBuffer:ResetCursor() → () Resets the position of the cursor. local buffer = BitBuffer.new() buffer:WriteUInt(32, 890) buffer:ResetCursor() print(buffer:GetCursor()) --&gt; 0   "},{"title":"SetCursor","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#SetCursor","content":"General &lt;/&gt; BitBuffer:SetCursor(position: number) → () Sets the position of the cursor to the given position. local buffer = BitBuffer.new() buffer:WriteUInt(32, 67) buffer:WriteUInt(32, 44) buffer:SetCursor(32) print(buffer:ReadUInt(32)) --&gt; 44   "},{"title":"ToBase128","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ToBase128","content":"Serialization &lt;/&gt; BitBuffer:ToBase128() → () Serializes the buffer into a Base128 string. You can retrieve the buffer from this string using BitBuffer.FromBase128. return string  "},{"title":"ToBase64","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ToBase64","content":"Serialization &lt;/&gt; BitBuffer:ToBase64() → string Serializes the buffer into a Base64 string. You can retrieve the buffer from this string using BitBuffer.FromBase64. local initialBuffer = BitBuffer.new() initialBuffer:WriteUInt(15, 919) initialBuffer:WriteString(&quot;Hello!&quot;) local b64 = initialBuffer:ToBase64() local newBuffer = BitBuffer.FromBase64(b64) print(newBuffer:ReadUInt(15)) --&gt; 919 print(newBuffer:ReadString()) --&gt; Hello! See BitBuffer.FromBase64  "},{"title":"ToBase91","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ToBase91","content":"Serialization &lt;/&gt; BitBuffer:ToBase91() → string Serializes the buffer into a Base91 string. You can retrieve the buffer from this string using BitBuffer.FromBase91. This is the recommended function to use for DataStores. local buffer = BitBuffer.new() buffer:WriteString(playerData.CustomName) buffer:WriteUInt(8, playerData.Level) buffer:WriteUInt(16, playerData.Money) SaveToDataStore(buffer:ToBase91()) local b91 = RetrieveFromDataStore() local buffer = BitBuffer.FromBase91(b91) local playerData = { CustomName = buffer:ReadString(); Level = buffer:ReadUInt(8); Money = buffer:ReadUInt(16); } See BitBuffer.FromBase91  "},{"title":"ToString","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#ToString","content":"Serialization &lt;/&gt; BitBuffer:ToString() → string Serializes the buffer into a binary string. You can retrieve the buffer from this string using BitBuffer.FromString. local buffer = BitBuffer.new() buffer:WriteUInt(8, 65) buffer:WriteUInt(8, 66) buffer:WriteUInt(8, 67) print(buffer:ToString()) --&gt; ABC See BitBuffer.FromString  "},{"title":"WriteBool","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteBool","content":"Write &lt;/&gt; BitBuffer:WriteBool(value: any) → () Writes one bit the buffer: 1 if value is truthy, 0 otherwise. local buffer = BitBuffer.new() buffer:WriteBool(true) --&gt; Writes 1 buffer:WriteBool(&quot;A&quot;) --&gt; Also writes 1 buffer:WriteBool(nil) --&gt; Writes 0   "},{"title":"WriteBytes","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteBytes","content":"Write &lt;/&gt; BitBuffer:WriteBytes(bytes: string) → () Writes a stream of bytes to the buffer. if bytes is an empty string, nothing will be written. local buffer = BitBuffer.new() buffer:WriteBytes(&quot;AD&quot;) buffer:ResetCursor() print(buffer:ReadUInt(8), buffer:ReadUInt(8)) --&gt; 65 68 See BitBuffer::WriteString  "},{"title":"WriteChar","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteChar","content":"Write &lt;/&gt; BitBuffer:WriteChar(char: string) → () Writes one ASCII character (one byte) to the buffer.char cannot be an empty string. local buffer = BitBuffer.new() buffer:WriteChar(&quot;k&quot;) buffer:ResetCursor() print(buffer:ReadChar()) --&gt; k   "},{"title":"WriteFloat32","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteFloat32","content":"Write &lt;/&gt; BitBuffer:WriteFloat32(float: number) → () Writes a single-precision floating point number to the buffer. local buffer = BitBuffer.new() buffer:WriteFloat32(892.738) buffer:ResetCursor() print(buffer:ReadFloat32()) --&gt; 892.73797607421875   "},{"title":"WriteFloat64","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteFloat64","content":"Write &lt;/&gt; BitBuffer:WriteFloat64(double: number) → () Writes a double-precision floating point number to the buffer. local buffer = BitBuffer.new() buffer:WriteFloat64(-76358128.888202341) buffer:ResetCursor() print(buffer:ReadFloat64()) --&gt; -76358128.888202   "},{"title":"WriteInt","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteInt","content":"Write &lt;/&gt; BitBuffer:WriteInt( bitWidth: number, int: number ) → () Writes a signed integer of bitWidth bits using two's complement. bitWidth must be an integer between 1 and 32. Overflow is untested, use at your own risk. local buffer = BitBuffer.new() buffer:WriteInt(22, -901) --&gt; Writes -901 to the buffer   "},{"title":"WriteString","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteString","content":"Write &lt;/&gt; BitBuffer:WriteString(str: string) → () Writes a string to the buffer. WriteString will write the length of the string as a 24-bit unsigned integer first, then write the bytes in the string. The length of the string cannot be greater than 2^24 - 1 (16777215). local buffer = BitBuffer.new() buffer:WriteString(&quot;AB&quot;) buffer:ResetCursor() print(buffer:ReadUInt(24), buffer:ReadBytes(2)) --&gt; 2 AB See BitBuffer::WriteBytes  "},{"title":"WriteUInt","type":1,"pageTitle":"BitBuffer","url":"api/BitBuffer#WriteUInt","content":"Write &lt;/&gt; BitBuffer:WriteUInt( bitWidth: number, uint: number ) → () Writes an unsigned integer of bitWidth bits to the buffer. bitWidth must be an integer between 1 and 32. If the input integer uses more bits than bitWidth, it will overflow as expected. buffer:WriteUInt(32, 560) -- Writes 560 to the buffer buffer:WriteUInt(3, 9) -- Writes 0b101 (5) because 9 is 0b1101, but `bitWidth` is only 3!  "}]